import sqlite3
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, \
    ConversationHandler

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DB_FILE = "diary_db.db"  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
BOT_TOKEN = "7472392075:AAECVXgVHUt4g3E5xmF4oFNascVQYttJD4E"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
STATE_WRITE = 1  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
STATE_VIEW = 2  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π


class DiaryDB:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–Ω–µ–≤–Ω–∏–∫–∞"""

    def __init__(self, db_file):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.conn = sqlite3.connect(db_file, check_same_thread=False)
        self._setup_db()

    def _setup_db(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)"""
        cur = self.conn.cursor()
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π
        cur.execute("""
            CREATE TABLE IF NOT EXISTS entries (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                text TEXT NOT NULL,
                created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )
        """)
        self.conn.commit()

    def add_user(self, user_id, username, first_name, last_name):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        cur = self.conn.cursor()
        cur.execute(
            "INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) "
            "VALUES (?, ?, ?, ?)",
            (user_id, username, first_name, last_name)
        )
        self.conn.commit()

    def add_entry(self, user_id, text):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫"""
        cur = self.conn.cursor()
        cur.execute(
            "INSERT INTO entries (user_id, text) VALUES (?, ?)",
            (user_id, text)
        )
        self.conn.commit()
        return cur.lastrowid  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏

    def get_entries(self, user_id, limit=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)"""
        cur = self.conn.cursor()
        cur.execute(
            "SELECT id, text, created FROM entries "
            "WHERE user_id = ? ORDER BY created DESC LIMIT ?",
            (user_id, limit)
        )
        return cur.fetchall()

    def get_entry(self, entry_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ ID"""
        cur = self.conn.cursor()
        cur.execute(
            "SELECT text, created FROM entries WHERE id = ?",
            (entry_id,)
        )
        return cur.fetchone()

    def get_stats(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cur = self.conn.cursor()

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cur.execute("SELECT COUNT(*) FROM entries WHERE user_id = ?", (user_id,))
        count = cur.fetchone()[0]

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
        cur.execute("SELECT SUM(LENGTH(text)) FROM entries WHERE user_id = ?", (user_id,))
        chars = cur.fetchone()[0] or 0

        # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        cur.execute("SELECT reg_date FROM users WHERE user_id = ?", (user_id,))
        reg_date = datetime.strptime(cur.fetchone()[0], "%Y-%m-%d %H:%M:%S")

        # –í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
        used_time = datetime.now() - reg_date

        return {
            "count": count,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            "chars": chars,  # –°—É–º–º–∞ —Å–∏–º–≤–æ–ª–æ–≤
            "reg_date": reg_date,  # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            "used_time": used_time  # –í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        }


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DiaryDB(DB_FILE)


# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ==========

async def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user = update.effective_user
    db.add_user(user.id, user.username, user.first_name, user.last_name)

    await update.message.reply_text(
        "üìò *–õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫*\n\n"
        "–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –º—ã—Å–ª–∏ –∏ —Å–æ–±—ã—Ç–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/new - –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å\n"
        "/list - –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/help - –ü–æ–º–æ—â—å",
        parse_mode="Markdown"
    )


async def help_cmd(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help - —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    await update.message.reply_text(
        "‚ÑπÔ∏è *–ü–æ–º–æ—â—å*\n\n"
        "/new - –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å\n"
        "/list - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏\n"
        "/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        parse_mode="Markdown"
    )


async def new_entry(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /new - –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    context.user_data["entry_parts"] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è —á–∞—Å—Ç–µ–π –∑–∞–ø–∏—Å–∏

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done")]
    ])

    await update.message.reply_text(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏. –ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∏–ª–∏ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
        reply_markup=keyboard
    )

    return STATE_WRITE  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è


async def get_text(update, context):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø–∏—Å–∏ (–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ STATE_WRITE)"""
    context.user_data["entry_parts"].append(update.message.text)
    return STATE_WRITE


async def save_entry(update, context):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ì–æ—Ç–æ–≤–æ')"""
    query = update.callback_query
    await query.answer()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
    full_text = "\n\n".join(context.user_data["entry_parts"])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    entry_id = db.add_entry(update.effective_user.id, full_text)
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    del context.user_data["entry_parts"]

    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–∏—Å–∏
    chars = len(full_text)
    words = len(full_text.split())

    await query.edit_message_text(
        f"üìù –ó–∞–ø–∏—Å—å #{entry_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
        f"–°–∏–º–≤–æ–ª–æ–≤: {chars}, —Å–ª–æ–≤: {words}"
    )

    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π


async def cancel_entry(update, context):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    if "entry_parts" in context.user_data:
        del context.user_data["entry_parts"]

    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END


async def show_entries(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π"""
    entries = db.get_entries(update.effective_user.id)

    if not entries:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π")
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
    buttons = []
    for entry in entries:
        entry_id, _, date_str = entry
        date = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
        buttons.append([
            InlineKeyboardButton(date.strftime("%d.%m %H:%M"), callback_data=f"show_{entry_id}")
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    buttons.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")])

    await update.message.reply_text(
        "üìö –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

    return STATE_VIEW  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞


async def show_entry(update, context):
    """–ü–æ–∫–∞–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ (–ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏)"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –∏–∑ callback_data
    entry_id = int(query.data.split("_")[1])
    entry = db.get_entry(entry_id)

    if not entry:
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞")
        return STATE_VIEW

    text, date_str = entry
    date = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–ø–∏—Å—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await query.edit_message_text(
        f"üìÖ {date.strftime('%d.%m.%Y %H:%M')}\n\n{text}",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
        ])
    )

    return STATE_VIEW


async def back_to_list(update, context):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π (–∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥')"""
    return await show_entries(update, context)


async def close_entries(update, context):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π (–∫–Ω–æ–ø–∫–∞ '–ó–∞–∫—Ä—ã—Ç—å')"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
    return ConversationHandler.END


async def show_stats(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats = db.get_stats(update.effective_user.id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    days = stats["used_time"].days
    hours = stats["used_time"].seconds // 3600
    mins = (stats["used_time"].seconds % 3600) // 60

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    reg_date = stats["reg_date"].strftime("%d.%m.%Y")
    # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –∑–∞–ø–∏—Å–∏
    avg_len = stats["chars"] // stats["count"] if stats["count"] > 0 else 0

    await update.message.reply_text(
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date}\n"
        f"‚è≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {days}–¥ {hours}—á {mins}–º\n"
        f"üìù –ó–∞–ø–∏—Å–µ–π: {stats['count']}\n"
        f"üî§ –°–∏–º–≤–æ–ª–æ–≤: {stats['chars']}\n"
        f"üìè –°—Ä–µ–¥–Ω–µ–µ: {avg_len} —Å–∏–º–≤/–∑–∞–ø–∏—Å—å",
        parse_mode="Markdown"
    )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    app = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π (–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
    entry_handler = ConversationHandler(
        entry_points=[CommandHandler("new", new_entry)],
        states={
            STATE_WRITE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_text),
                CallbackQueryHandler(save_entry, pattern="^done$"),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_entry)],
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π (–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
    view_handler = ConversationHandler(
        entry_points=[CommandHandler("list", show_entries)],
        states={
            STATE_VIEW: [
                CallbackQueryHandler(show_entry, pattern="^show_"),
                CallbackQueryHandler(back_to_list, pattern="^back$"),
                CallbackQueryHandler(close_entries, pattern="^close$"),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_entry)],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("stats", show_stats))
    app.add_handler(entry_handler)
    app.add_handler(view_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        lambda u, c: u.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")
    ))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling


if __name__ == "__main__":
    main()